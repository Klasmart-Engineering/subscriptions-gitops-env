apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    app: {{ .Values.appName }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.appName }}
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.imagePullSecret }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      initContainers:
        - name: setup
          image: tmaier/postgresql-client
          command: ["/usr/bin/psql"]
          args:
            - "--host=$(DATABASE_HOST)"
            - "--port=5432"
            - "--username=$(DATABASE_MASTER_USER)"
            - "CREATE USER $(USERNAME) WITH PASSWORD $(PASSWORD); CREATE DATABASE $(NAME); GRANT ALL PRIVILEGES ON DATABASE $(NAME) TO $(USERNAME);"
          env:
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: tf-outputs
                key: db_master_password
          - name: DATABASE_MASTER_USER
            valueFrom:
              secretKeyRef:
                name: tf-outputs
                key: db_master_usename
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: tf-outputs
                key: db_hostname
          - name: USERNAME
            valueFrom:
              secretKeyRef:
                name: tf-outputs
                key: db_username
          - name: PASSWORD
            valueFrom:
              secretKeyRef:
                name: tf-outputs
                key: db_password
          - name: NAME
            valueFrom:
              secretKeyRef:
                name: tf-outputs
                key: db_logical_name
      containers:
        - name: {{ .Values.appName }}
          image: "{{ .Values.image.repository }}{{ .Values.image.image }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: PROFILE
              value: apifactory-uk
            - name: DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: tf-outputs
                  key: hostname
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: tf-outputs
                  key: db_port
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: tf-outputs
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tf-outputs
                  key: password
            - name: DATABASE_DATABASENAME
              valueFrom:
                secretKeyRef:
                  name: tf-outputs
                  key: db_name
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /liveness
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 3
